<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 学生平台统计SQLMap -->
<mapper namespace="com.zzrenfeng.zznueg.dao.StudentPlatformStatMapper" >
	<!-- 获取某个学生的总成绩及总成绩在全校中的排名 -->
	<select id="getStuTotalScoreAndRankBySuid" parameterType="java.util.Map" resultType="java.util.HashMap">
		select tt.* from (
			select 
				f.stuUserId as stuUserId, 
				f.stuNo as stuNo,
				f.stuName as stuName,
				f.stuSex as stuSex,
				f.weige as weige,
				f.banshu as banshu,
				f.jiaoan as jiaoan,
				f.kejian as kejian,
				f.zong as zong,
				(@rowno:=@rowno + 1) as rowno,
				(@rank:=(case when @preScore=f.zong then @rank else @rowno end)) as zongRank,
				@preScore:=f.zong as preScore,
				h.totalCount as totalCount
			from (
				select m.stuUserId,m.stuNo,m.stuName,m.stuSex,n.weige,n.banshu,n.jiaoan,n.kejian,n.zong,m.deptId,m.classId
				from (
					select id as stuUserId,tsno as stuNo,name as stuName,sex as stuSex,deptId,classId 
					from zznu_eva_teach_stu_info where userType='S' and status='E' and isOpenAct='1'
				) m left join (
					select 
						v.stuUserId as stuUserId,
						v.weige as weige,
						v.banshu as banshu,
						v.jiaoan as jiaoan,
						v.kejian as kejian,
						(v.weige+v.banshu+v.jiaoan+v.kejian) as zong
					from (
						select a.stuUserId,
							sum(case when a.subjectId='01' then if(a.evalScore is not null,a.evalScore,null) end) as weige,
							sum(case when a.subjectId='02' then if(a.evalScore is not null,a.evalScore,null) end) as banshu,
							sum(case when a.subjectId='03' then if(a.evalScore is not null,a.evalScore,null) end) as jiaoan,
							sum(case when a.subjectId='04' then if(a.evalScore is not null,a.evalScore,null) end) as kejian	
						from (
							select 
								v.pid as uploadPid,
								e.stuUserId as stuUserId,
								e.subjectId as subjectId,
								e.uploadCount as uploadCount,
								v.evalScore as evalScore
							from (
								select max(s.pid) as pid,t.subjectId as subjectId,max(s.evalScore) as evalScore
								from (
									select subjectId,max(evalScore) as evalScore 
									from zznu_eva_stu_upload_info 
									where isUploadSucess='S' 
									group by stuUserId,subjectId
								) t left join zznu_eva_stu_upload_info s on (t.subjectId=s.subjectId and t.evalScore=s.evalScore)
								group by s.stuUserId,t.subjectId,t.evalScore
							) v left join zznu_eva_stu_upload_info e on v.pid=e.pid
						) a group by a.stuUserId
					) v
				) n on m.stuUserId=n.stuUserId order by n.zong desc
			) f, (select @rowno:=0, @rank:=0, @preScore:=0) r, 
				(select count(*) as totalCount from zznu_eva_teach_stu_info where userType='S' and status='E' and isOpenAct='1') h
			order by f.zong desc
		) tt where tt.stuUserId=#{stuUserId}
	</select>
	
	<!-- V1.0:根据学生ID和科目ID获取该学生该科目的最高成绩及该成绩在全校中的单科的排名 -->
<!-- 这个版本中没有加入该科的平均值	
	<select id="getSubScoreAndRankBySuidAndSid" parameterType="java.util.Map" resultType="java.util.HashMap">
		select 
			tt.stuUserId as stuUserId,
		 	tt.stuNo as stuNo,
		 	tt.stuName as stuName,
		 	tt.stuSex as stuSex,
		 	tt.subjectId as subjectId,
		 	tt.evalScore as evalScore,
		 	tt.rowno as rowno,
		 	tt.rank as rank,
		 	tt.preScore as preScore,
		 	tt.totalCount as totalCount
		from (
			select 
				f.stuUserId as stuUserId, 
				f.stuNo as stuNo,
				f.stuName as stuName,
				f.stuSex as stuSex,
				f.subjectId as subjectId,
				f.evalScore as evalScore,
				(@rowno:=@rowno + 1) as rowno,
				(@rank:=(case when @preScore=f.evalScore then @rank else @rowno end)) as rank,
				@preScore:=f.evalScore as preScore,
				h.totalCount as totalCount
			from (
				select m.stuUserId,m.stuNo,m.stuName,m.stuSex,n.subjectId,n.evalScore,m.deptId,m.classId 
				from (
					select id as stuUserId,tsno as stuNo,name as stuName,sex as stuSex,deptId,classId  
						from zznu_eva_teach_stu_info where userType='S' and status='E' and isOpenAct='1'
				) m left join (
					select a.uploadPid,a.stuUserId,a.subjectId,a.uploadCount,sum(a.evalScore) as evalScore from (
						select 
							v.pid as uploadPid,e.stuUserId as stuUserId,e.subjectId as subjectId,e.uploadCount as uploadCount,v.evalScore as evalScore
						from (
							select max(s.pid) as pid,t.subjectId as subjectId,max(s.evalScore) as evalScore
							from (
								select subjectId,max(evalScore) as evalScore 
								from zznu_eva_stu_upload_info 
								where isUploadSucess='S' and subjectId=#{subjectId}
								group by stuUserId,subjectId
							) t left join zznu_eva_stu_upload_info s on (t.subjectId=s.subjectId and t.evalScore=s.evalScore)
							group by s.stuUserId,t.subjectId,t.evalScore
						) v left join zznu_eva_stu_upload_info e on v.pid=e.pid
					) a group by a.stuUserId,a.subjectId
				) n on m.stuUserId=n.stuUserId order by n.evalScore desc
			) f, (select @rowno:=0, @rank:=0, @preScore:=0) r, 
					(select count(*) as totalCount from zznu_eva_teach_stu_info where userType='S' and status='E' and isOpenAct='1') h
				order by f.evalScore desc
		) tt where tt.stuUserId=#{stuUserId}
	</select>
 -->	
	
	<!-- V1.1:根据学生ID和科目ID获取该学生该科目的最高成绩及该成绩在全校中的单科的排名，及平均成绩 -->
	<!-- 新增字段：sumScore-单科所有上传的总成绩；subCount-单科所有上传次数；avgSubScore-单科平均值 -->
	<select id="getSubScoreAndRankBySuidAndSid" parameterType="java.util.Map" resultType="java.util.HashMap">
		select 
			tt.stuUserId as stuUserId,
		 	tt.stuNo as stuNo,
		 	tt.stuName as stuName,
		 	tt.stuSex as stuSex,
		 	tt.subjectId as subjectId,
		 	tt.evalScore as evalScore,
		 	tt.rowno as rowno,
		 	cast(tt.rank as signed) as rank,
		 	tt.preScore as preScore,
		 	tt.totalCount as totalCount,
			aa.sumScore as sumScore,
			aa.subCount as subCount,
			aa.avgSubScore as avgSubScore
		from (
			select 
				f.stuUserId as stuUserId, 
				f.stuNo as stuNo,
				f.stuName as stuName,
				f.stuSex as stuSex,
				f.subjectId as subjectId,
				f.evalScore as evalScore,
				(@rowno:=@rowno + 1) as rowno,
				(@rank:=(case when @preScore=f.evalScore then @rank else @rowno end)) as rank,
				@preScore:=f.evalScore as preScore,
				h.totalCount as totalCount
			from (
				select m.stuUserId,m.stuNo,m.stuName,m.stuSex,n.subjectId,n.evalScore,m.deptId,m.classId 
				from (
					select id as stuUserId,tsno as stuNo,name as stuName,sex as stuSex,deptId,classId  
						from zznu_eva_teach_stu_info where userType='S' and status='E' and isOpenAct='1'
				) m left join (
					select a.uploadPid,a.stuUserId,a.subjectId,a.uploadCount,sum(a.evalScore) as evalScore from (
						select 
							v.pid as uploadPid,e.stuUserId as stuUserId,e.subjectId as subjectId,e.uploadCount as uploadCount,v.evalScore as evalScore
						from (
							select max(s.pid) as pid,t.subjectId as subjectId,max(s.evalScore) as evalScore
							from (
								select subjectId,max(evalScore) as evalScore 
								from zznu_eva_stu_upload_info 
								where isUploadSucess='S' and subjectId=#{subjectId,jdbcType=VARCHAR}
								group by stuUserId,subjectId
							) t left join zznu_eva_stu_upload_info s on (t.subjectId=s.subjectId and t.evalScore=s.evalScore)
							group by s.stuUserId,t.subjectId,t.evalScore
						) v left join zznu_eva_stu_upload_info e on v.pid=e.pid
					) a group by a.stuUserId,a.subjectId
				) n on m.stuUserId=n.stuUserId order by n.evalScore desc
			) f, (select @rowno:=0, @rank:=0, @preScore:=0) r, 
					(select count(*) as totalCount from zznu_eva_teach_stu_info where userType='S' and status='E' and isOpenAct='1') h
				order by f.evalScore desc
		) tt,(select a.subjectId as subjectId,a.sumScore as sumScore,a.subCount as subCount,round(a.sumScore/a.subCount,2) as avgSubScore 
						from (
							select subjectId,sum(evalScore) as sumScore,t.subCount as subCount
							from zznu_eva_stu_upload_info,(select count(*) as subCount from zznu_eva_stu_upload_info where isUploadSucess='S' and subjectId=#{subjectId,jdbcType=VARCHAR}) t
							where isUploadSucess='S' and subjectId=#{subjectId,jdbcType=VARCHAR}
							group by subjectId
						) a 
				 ) aa
		where tt.stuUserId=#{stuUserId,jdbcType=VARCHAR}	
	</select>
 
 
	<!-- 根据学生ID查询该学生每次总成绩的统计 -->
	<select id="getSumScoresByCountBySuid" parameterType="java.util.Map" resultType="java.util.HashMap">
		select 
			stuUserId,
			uploadCount,
			sum(evalScore) as sumScore 
		from zznu_eva_stu_upload_info 
		where stuUserId=#{stuUserId} and isUploadSucess='S'
		group by uploadCount
		order by uploadCount,subjectId asc
	</select>
	
	<!-- 根据学生ID和上传次数查询每次上传科目的成绩记录 -->
	<select id="getSubScoresBySuidAndUpcnt" parameterType="java.util.Map" resultType="java.util.HashMap">
		select 
			pid as uploadPid,
			stuUserId,
			subjectId,
			subjectName,
			uploadPath,
			uploadCount,
			uploadTime,
			fileSize,
			evalScore,
			evalTime,
			teachUserId 
		from zznu_eva_stu_upload_info 
		where isUploadSucess='S' 
			and stuUserId=#{stuUserId,jdbcType=VARCHAR} 
			and uploadCount=#{uploadCount,jdbcType=SMALLINT}
		order by subjectId asc
	</select>
	
	<!-- 根据科目ID查询该科目的总成绩，总考试人数，平均成绩 -->
	<select id="getAvgSubScoreBySid" parameterType="java.util.Map" resultType="java.util.HashMap">
		select 
			a.subjectId as subjectId,
			a.sumScore as sumScore,
			a.subCount as subCount,
			round(a.sumScore/a.subCount,2) as avgSubScore
		from (
			select subjectId,sum(evalScore) as sumScore,t.subCount as subCount
			from zznu_eva_stu_upload_info,(select count(*) as subCount from zznu_eva_stu_upload_info where isUploadSucess='S' and subjectId=#{subjectId,jdbcType=VARCHAR}) t
			where isUploadSucess='S' and subjectId=#{subjectId,jdbcType=VARCHAR}
			group by subjectId
		) a 
	</select>
	
	<!-- 根据学生ID获取该学生每次上传的科目得到最好的成绩，根据每科最高成绩定位，即取每科分数最高的 --> 
	<select id="getBestSubScoreBySuid" parameterType="java.util.Map" resultType="java.util.HashMap">
		select 
			v.pid as uploadPid,
			e.stuUserId as uploadStuUserId,
			e.subjectId as subjectId,
			e.subjectName as subjectName,
			e.uploadCount as uploadCount,
			e.uploadPath as uploadPath,
			e.fileSize as fileSize,
			date_format(e.uploadTime,'%Y-%m-%d %T') as uploadTime,
			v.evalScore as evalScore,
			e.teachUserId as evalTeachUserId,
			date_format(e.evalTime,'%Y-%m-%d %T') as evalTime
		from (
			select max(s.pid) as pid,t.subjectId as subjectId,max(s.evalScore) as evalScore
			from (
				select subjectId,max(evalScore) as evalScore 
				from zznu_eva_stu_upload_info 
				where isUploadSucess='S' and stuUserId=#{stuUserId}
				group by stuUserId,subjectId
			) t left join zznu_eva_stu_upload_info s on (t.subjectId=s.subjectId and t.evalScore=s.evalScore)
			where s.stuUserId=#{stuUserId}
			group by s.stuUserId,t.subjectId,t.evalScore
		) v left join zznu_eva_stu_upload_info e on v.pid=e.pid
		order by e.subjectId asc 
	</select>
	
	<!-- 获取提升分数最高学生TOP10排名，全体学生最近两次考试成绩差距由高到低排序 --> 
	<select id="getStuLiftRangeTop10ByGap" parameterType="java.util.Map" resultType="java.util.HashMap">
		<!-- 暂时没有想到更好的解决方案，待补充 -->
	</select>
	
	<!-- 根据登录次数获取活跃度TOP10学生 --> 
	<select id="getStuActivityTop10ByLoginCnt" parameterType="java.util.Map" resultType="java.util.HashMap">
		select a.id as stuUserId,a.tsno as stuNo,a.name as stuName,convert(b.LOGIN_COUNT,SIGNED) as loginCount 
		from zznu_eva_teach_stu_info a left join sys_user b on a.id=b.USER_ID
		where a.userType='S' and a.status='E' and a.isOpenAct='1'
		order by loginCount desc limit 0,10
	</select>
	
	<!-- 根据学生ID获取该学生上传的最大次数 -->
	<select id="getMaxUpCountBySuid" parameterType="java.util.Map" resultType="java.lang.Integer">
		select max(uploadCount) as maxCount from zznu_eva_stu_upload_info
		where isUploadSucess='S' and stuUserId=#{stuUserId}
	</select>
	
	<!-- 获取一个有效的问卷信息 -->
	<select id="getOneEnablePaperInfo" parameterType="java.util.Map" resultType="java.util.HashMap">
		select paperId,paperType,paperTitle,totalScore from zznu_eva_onl_paperlib_info where isEnable='1' limit 1
	</select>
	
	<!-- 获取有效的在线测评问卷内容信息 -->
	<select id="getOnlineEvalPaperInfo" parameterType="java.util.Map" resultType="java.util.HashMap">
		select
			v.paperId as paperId,
			v.paperType as paperType,
			v.paperTitle as paperTitle,
			v.questionId as questionId,
			v.questionNum as questionNum,
			v.questionCategory as questionCategory,
			v.questCateName as questCateName,
			v.questionType as questionType,
			v.questionContent as questionContent,
			v.questionAnswer as questionAnswer,
			v.questionScore as questionScore,
			max(v.optionAContent) as optionAContent,
			max(v.optionBContent) as optionBContent,
			max(v.optionCContent) as optionCContent,
			max(v.optionDContent) as optionDContent,
			max(v.optionAScore) as optionAScore,
			max(v.optionBScore) as optionBScore,
			max(v.optionCScore) as optionCScore,
			max(v.optionDScore) as optionDScore
		from (
			select p.paperId,p.paperType,p.paperTitle,a.questionId,a.questionNum,a.questionCategory,
				d.value as questCateName,a.questionType,a.questionContent,a.questionAnswer,a.questionScore,
				(case when b.optionCode='A' then b.optionContent end) as optionAContent,
				(case when b.optionCode='B' then b.optionContent end) as optionBContent,
				(case when b.optionCode='C' then b.optionContent end) as optionCContent,
				(case when b.optionCode='D' then b.optionContent end) as optionDContent,
				(case when b.optionCode='A' then b.optionScore end) as optionAScore,
				(case when b.optionCode='B' then b.optionScore end) as optionBScore,
				(case when b.optionCode='C' then b.optionScore end) as optionCScore,
				(case when b.optionCode='D' then b.optionScore end) as optionDScore
			from zznu_eva_onl_paperlib_info p left join zznu_eva_onl_question_info a on p.paperId=a.paperId
				left join zznu_eva_onl_question_option_info b on a.questionId=b.questionId
				left join zznu_eva_dictionary_info d on a.questionCategory=d.key
			where p.isEnable='1'
			<if test="paperId != null and paperId != ''">
				and p.paperId=#{paperId}
			</if>
		) v
		group by v.questionId
		order by  v.questionCategory,v.questionNum asc		
	</select>
	
</mapper>
