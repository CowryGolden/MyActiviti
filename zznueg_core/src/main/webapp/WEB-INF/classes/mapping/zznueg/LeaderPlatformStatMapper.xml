<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 领导平台统计SQLMap -->
<mapper namespace="com.zzrenfeng.zznueg.dao.LeaderPlatformStatMapper" >
	<!-- 分页获取全校所有学生基本信息及成绩信息，还可以根据学生学号进行信息模糊检索 -->
	<select id="getAllStusInfoAndSubScoresByPage" parameterType="java.util.Map" resultType="java.util.HashMap">
		select 
			m.stuUserId as stuUserId,
			m.stuNo as stuNo,
			m.stuName as stuName,
			m.stuSex as stuSex,
			m.classId as classId,
			m.className as className,
			m.deptId as deptId,
			m.deptName as deptName,
			m.acaId as acaId,
			m.acaName as acaName,
			n.weige as weige,
			n.banshu as banshu,
			n.jiaoan as jiaoan,
			n.kejian as kejian,
			n.zong as zong
		from (
			select a.id as stuUserId,a.tsno as stuNo,a.name as stuName,a.sex as stuSex,
				b.acaId,b.acaName,a.deptId,b.deptName,a.classId,c.className
			from zznu_eva_teach_stu_info a left join zznu_eva_dept_info b on a.deptId=b.deptId
				left join zznu_eva_class_info c on a.classId=c.classId
			where a.userType='S' and a.status='E' and a.isOpenAct='1' and b.status='E' and c.status='E'
		) m left join (
			select v.stuUserId as stuUserId,
				v.weige as weige,
				v.banshu as banshu,
				v.jiaoan as jiaoan,
				v.kejian as kejian,
				(v.weige+v.banshu+v.jiaoan+v.kejian) as zong
			from (
				select a.stuUserId,
					sum(case when a.subjectId='01' then if(a.evalScore is not null,a.evalScore,null) end) as weige,
					sum(case when a.subjectId='02' then if(a.evalScore is not null,a.evalScore,null) end) as banshu,
					sum(case when a.subjectId='03' then if(a.evalScore is not null,a.evalScore,null) end) as jiaoan,
					sum(case when a.subjectId='04' then if(a.evalScore is not null,a.evalScore,null) end) as kejian	
				from (
					select tt.pid as uploadPid,e.stuUserId as stuUserId,e.subjectId as subjectId,e.uploadPath as uploadPath,
						tt.uploadCount as uploadCount,e.evalScore as evalScore,e.uploadTime as uploadTime,e.evalTime as evalTime
					from (
						select max(s.pid) as pid,max(s.uploadCount) as uploadCount
						from (
							select subjectId,max(evalScore) as evalScore 
							from zznu_eva_stu_upload_info 
							where isUploadSucess='S' 
							group by stuUserId,subjectId
						) t left join zznu_eva_stu_upload_info s on (t.subjectId=s.subjectId and t.evalScore=s.evalScore)
						
						group by s.stuUserId,t.subjectId,t.evalScore
					) tt left join zznu_eva_stu_upload_info e on tt.pid=e.pid
				) a group by a.stuUserId
			) v
		) n on m.stuUserId=n.stuUserId
		<if test="stuNo != null and stuNo != ''"> <!-- 由于前端学生学号或姓名检索框为同一个输入框，虽然同一个值分拆成两个，但实际只能为一个值；判断一个即可 -->
			where (m.stuNo like concat(concat('%', #{stuNo,jdbcType=VARCHAR}), '%'))
				or (m.stuName like concat(concat('%', #{stuName,jdbcType=VARCHAR}), '%'))
		</if>
		order by m.deptId,m.classId asc
		limit #{begin},#{end}
	</select>
	
	<!-- 获取有效学生总数，以供分页使用 -->
	<select id="getTotalStusCount" parameterType="java.util.Map" resultType="java.lang.Long">
		select count(*) as stuCount
		from zznu_eva_teach_stu_info
		where userType='S' and status='E' and isOpenAct='1'
		<if test="stuNo != null and stuNo != ''"> <!-- 由于前端学生学号或姓名检索框为同一个输入框，虽然同一个值分拆成两个，但实际只能为一个值；判断一个即可 -->
			and ((tsno like concat(concat('%', #{stuNo,jdbcType=VARCHAR}), '%'))
				or (name like concat(concat('%', #{stuName,jdbcType=VARCHAR}), '%')))
		</if>
	</select>
	
	<!-- 根据科目ID获取各科平均与单科最高成绩 -->
	<select id="getAvgAndMaxSubScore" parameterType="java.util.Map" resultType="java.util.HashMap">
		select 
			m.subjectId as subjectId,
			m.maxSubScore as maxSubScore,
			n.avgSubScore as avgSubScore
		from (
			select subjectId,max(evalScore) as maxSubScore 
			from zznu_eva_stu_upload_info 
			where isUploadSucess='S' group by subjectId
		) m left join (
			select subjectId,round(avg(if(evalScore is not null,evalScore,0)),2) as avgSubScore 
			from zznu_eva_stu_upload_info 
			where isUploadSucess='S' group by subjectId
		) n on m.subjectId=n.subjectId
		<if test="subjectId != null and subjectId != ''">
			where m.subjectId=#{subjectId,jdbcType=VARCHAR} 
		</if>
	</select>
	
	<!-- 根据科目ID和上传次数获取该科目在该次数中所有考试学生的平均成绩 -->
	<select id="getAvgSubScoreBySidCnt" parameterType="java.util.Map" resultType="java.util.HashMap">
		select 
			v.subjectId as subjectId,
			v.uploadCount as uploadCount,
			v.avgSubScore as avgSubScore
		from (
			select subjectId,uploadCount,round(avg(if(evalScore is not null,evalScore,0)),2) as avgSubScore 
			from zznu_eva_stu_upload_info 
			where isUploadSucess='S' 
			group by subjectId,uploadCount
		) v where v.subjectId=#{subjectId,jdbcType=VARCHAR} and v.uploadCount=#{uploadCount,jdbcType=SMALLINT}
		order by v.subjectId,v.uploadCount asc
	</select>
	
	<!-- 获取全体学生所有科目中最大上传的次数 -->
	<select id="getMaxUploadCount" parameterType="java.util.Map" resultType="java.lang.Integer">
		select max(uploadCount) as maxCount from zznu_eva_stu_upload_info where isUploadSucess='S' 
	</select>
	
	<!-- 获取综合分数TOP10的学生及成绩 -->
	<select id="getCompreScoreTop10" parameterType="java.util.Map" resultType="java.util.HashMap">
		select 
			m.id as stuUserId,
			m.name as stuName,
			m.tsno as stuNo,
			m.sex as stuSex,
			n.weige as weige,
			n.banshu as banshu,
			n.jiaoan as jiaoan,
			n.kejian as kejian,
			n.zong as zong
		from zznu_eva_teach_stu_info m 
		left join (
			select v.stuUserId as stuUserId,
				v.weige as weige,
				v.banshu as banshu,
				v.jiaoan as jiaoan,
				v.kejian as kejian,
				(v.weige+v.banshu+v.jiaoan+v.kejian) as zong
			from (
				select a.stuUserId,
					sum(case when a.subjectId='01' then if(a.evalScore is not null,a.evalScore,0) end) as weige,
					sum(case when a.subjectId='02' then if(a.evalScore is not null,a.evalScore,0) end) as banshu,
					sum(case when a.subjectId='03' then if(a.evalScore is not null,a.evalScore,0) end) as jiaoan,
					sum(case when a.subjectId='04' then if(a.evalScore is not null,a.evalScore,0) end) as kejian	
				from (
					select tt.pid as uploadPid,e.stuUserId as stuUserId,e.subjectId as subjectId,e.uploadPath as uploadPath,
						tt.uploadCount as uploadCount,e.evalScore as evalScore,e.uploadTime as uploadTime,e.evalTime as evalTime
					from (
						select max(s.pid) as pid,max(s.uploadCount) as uploadCount
						from (
							select subjectId,max(evalScore) as evalScore 
							from zznu_eva_stu_upload_info 
							where isUploadSucess='S' 
							group by stuUserId,subjectId
						) t left join zznu_eva_stu_upload_info s on (t.subjectId=s.subjectId and t.evalScore=s.evalScore)
						
						group by s.stuUserId,t.subjectId,t.evalScore
					) tt left join zznu_eva_stu_upload_info e on tt.pid=e.pid
				) a group by a.stuUserId
			) v
		) n on m.id=n.stuUserId
		where m.userType='S' and m.status='E' and m.isOpenAct='1'
		order by n.zong desc limit 10
	</select>
	
	<!-- 根据科目ID和上传次数获取该科目在该次数中所有考试学生的不及格人数 -->
	<select id="getFailCountBySidCnt" parameterType="java.util.Map" resultType="java.util.HashMap">
		select 
			v. subjectId as subjectId,
			v.uploadCount as uploadCount,
			v.failCount as failCount
		from (
			select subjectId,uploadCount,
			<![CDATA[
				sum(if(evalScore < 60, 1, 0)) as failCount 
			]]>		
			from zznu_eva_stu_upload_info group by subjectId,uploadCount
		) v where v.subjectId=#{subjectId,jdbcType=VARCHAR} and v.uploadCount=#{uploadCount,jdbcType=SMALLINT}
	</select>
	
	<!-- 获取不同学院的各科通过率及综合通过率 -->
	<select id="getPassRateGroupbyAcaId" parameterType="java.util.Map" resultType="java.util.HashMap">
		select ff.acaId as acaId, ff.acaName as acaName,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.weigeSum / ff.stuTotal,2),0) as weigeAvg,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.weigeA / ff.stuTotal,4),0) as weigeARate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.weigeB / ff.stuTotal,4),0) as weigeBRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.weigeC / ff.stuTotal,4),0) as weigeCRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.weigeD / ff.stuTotal,4),0) as weigeDRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.weigeE / ff.stuTotal,4),0) as weigeERate,
			ff.weigeCount,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.banshuSum / ff.stuTotal,2),0) as banshuAvg,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.banshuA / ff.stuTotal,4),0) as banshuARate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.banshuB / ff.stuTotal,4),0) as banshuBRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.banshuC / ff.stuTotal,4),0) as banshuCRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.banshuD / ff.stuTotal,4),0) as banshuDRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.banshuE / ff.stuTotal,4),0) as banshuERate,
			ff.banshuCount,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.jiaoanSum / ff.stuTotal,2),0) as jiaoanAvg,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.jiaoanA / ff.stuTotal,4),0) as jiaoanARate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.jiaoanB / ff.stuTotal,4),0) as jiaoanBRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.jiaoanC / ff.stuTotal,4),0) as jiaoanCRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.jiaoanD / ff.stuTotal,4),0) as jiaoanDRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.jiaoanE / ff.stuTotal,4),0) as jiaoanERate,
			ff.jiaoanCount,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.kejianSum / ff.stuTotal,2),0) as kejianAvg,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.kejianA / ff.stuTotal,4),0) as kejianARate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.kejianB / ff.stuTotal,4),0) as kejianBRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.kejianC / ff.stuTotal,4),0) as kejianCRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.kejianD / ff.stuTotal,4),0) as kejianDRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.kejianE / ff.stuTotal,4),0) as kejianERate,
			ff.kejianCount,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.zongSum / ff.stuTotal,2),0) as zongAvg,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.zongPassCount / ff.stuTotal,4),0) as zongPassRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.zongA / ff.stuTotal,4),0) as zongARate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.zongB / ff.stuTotal,4),0) as zongBRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.zongC / ff.stuTotal,4),0) as zongCRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.zongD / ff.stuTotal,4),0) as zongDRate,
			if(ff.stuTotal is not null or ff.stuTotal != 0,round(ff.zongE / ff.stuTotal,4),0) as zongERate,
			ff.zongCount as zongCount,
			ff.stuTotal as stuTotal
		from (
			select 
			<![CDATA[
				f.acaId as acaId,f.acaName as acaName,
				sum(f.weige) as weigeSum,
				sum(if(f.weige>=90 and f.weige<=100,1,0)) as weigeA,
				sum(if(f.weige>=80 and f.weige<90,1,0)) as weigeB,
				sum(if(f.weige>=70 and f.weige<80,1,0)) as weigeC,
				sum(if(f.weige>=60 and f.weige<70,1,0)) as weigeD,
				sum(if(((f.weige>=0 and f.weige<60) or (f.weige is null)),1,0)) as weigeE,
				sum(if(f.banshu is not null,1,0)) as weigeCount, 
				sum(f.banshu) as banshuSum,
				sum(if(f.banshu>=90 and f.banshu<=100,1,0)) as banshuA,
				sum(if(f.banshu>=80 and f.banshu<90,1,0)) as banshuB,
				sum(if(f.banshu>=70 and f.banshu<80,1,0)) as banshuC,
				sum(if(f.banshu>=60 and f.banshu<70,1,0)) as banshuD,
				sum(if(((f.banshu>=0 and f.banshu<60) or (f.banshu is null)),1,0)) as banshuE,
				sum(if(f.banshu is not null,1,0)) as banshuCount, 
				sum(f.jiaoan) as jiaoanSum,
				sum(if(f.jiaoan>=90 and f.jiaoan<=100,1,0)) as jiaoanA,
				sum(if(f.jiaoan>=80 and f.jiaoan<90,1,0)) as jiaoanB,
				sum(if(f.jiaoan>=70 and f.jiaoan<80,1,0)) as jiaoanC,
				sum(if(f.jiaoan>=60 and f.jiaoan<70,1,0)) as jiaoanD,
				sum(if(((f.jiaoan>=0 and f.jiaoan<60) or (f.jiaoan is null)),1,0)) as jiaoanE,
				sum(if(f.jiaoan is not null,1,0)) as jiaoanCount, 
				sum(f.kejian) as kejianSum,
				sum(if(f.kejian>=90 and f.kejian<=100,1,0)) as kejianA,
				sum(if(f.kejian>=80 and f.kejian<90,1,0)) as kejianB,
				sum(if(f.kejian>=70 and f.kejian<80,1,0)) as kejianC,
				sum(if(f.kejian>=60 and f.kejian<70,1,0)) as kejianD,
				sum(if(((f.kejian>=0 and f.kejian<60) or (f.kejian is null)),1,0)) as kejianE,
				sum(if(f.kejian is not null,1,0)) as kejianCount, 
				sum(f.zong) as zongSum,
				sum(if((f.weige>=60 and f.banshu>=60 and f.jiaoan>=60 and f.kejian>=60),1,0)) as zongPassCount,
				sum(if(((f.weige>=90 and f.banshu>=90 and f.jiaoan>=90 and f.kejian>=90) and ((f.weige>=90 and f.weige<=100) or (f.banshu>=90 and f.banshu<=100) or (f.jiaoan>=90 and f.jiaoan<=100) or (f.kejian>=90 and f.kejian<=100))),1,0)) as zongA,
				sum(if(((f.weige>=80 and f.banshu>=80 and f.jiaoan>=80 and f.kejian>=80) and ((f.weige>=80 and f.weige<90) or (f.banshu>=80 and f.banshu<90) or (f.jiaoan>=80 and f.jiaoan<90) or (f.kejian>=80 and f.kejian<90))),1,0)) as zongB,
				sum(if(((f.weige>=70 and f.banshu>=70 and f.jiaoan>=70 and f.kejian>=70) and ((f.weige>=70 and f.weige<80) or (f.banshu>=70 and f.banshu<80) or (f.jiaoan>=70 and f.jiaoan<80) or (f.kejian>=70 and f.kejian<80))),1,0)) as zongC,
				sum(if(((f.weige>=60 and f.banshu>=60 and f.jiaoan>=60 and f.kejian>=60) and ((f.weige>=60 and f.weige<70) or (f.banshu>=60 and f.banshu<70) or (f.jiaoan>=60 and f.jiaoan<70) or (f.kejian>=60 and f.kejian<70))),1,0)) as zongD,
				sum(if(((f.weige<60 or f.banshu<60 or f.jiaoan<60 or f.kejian<60) or (f.weige is null or f.banshu is null or f.jiaoan is null or f.kejian is null)),1,0)) as zongE,
				sum(if(f.zong is not null,1,0)) as zongCount,
				count(distinct f.stuUserId) as stuTotal
			]]>
			from (
				select
					m.stuUserId as stuUserId,
					m.stuNo as stuNo,
					m.stuName as stuName,
					m.stuSex as stuSex,
					m.depId as depId,
					m.deptName as deptName,
					m.acaId as acaId,
					m.acaName as acaName,
					n.weige as weige,
					n.banshu as banshu,
					n.jiaoan as jiaoan,
					n.kejian as kejian,
					n.zong as zong
				from (
				select a.id as stuUserId,a.tsno as stuNo,a.name as stuName,a.sex as stuSex,
					a.deptId as depId,b.deptName as deptName,b.acaId as acaId,b.acaName as acaName
				from zznu_eva_teach_stu_info a left join zznu_eva_dept_info b on a.deptId=b.deptId
				where a.userType='S' and a.status='E' and a.isOpenAct='1'
				) m left join (
					select v.stuUserId as stuUserId,
						v.weige as weige,
						v.banshu as banshu,
						v.jiaoan as jiaoan,
						v.kejian as kejian,
						(v.weige+v.banshu+v.jiaoan+v.kejian) as zong
					from (
						select a.stuUserId,
							sum(case when a.subjectId='01' then if(a.evalScore is not null,a.evalScore,0) end) as weige,
							sum(case when a.subjectId='02' then if(a.evalScore is not null,a.evalScore,0) end) as banshu,
							sum(case when a.subjectId='03' then if(a.evalScore is not null,a.evalScore,0) end) as jiaoan,
							sum(case when a.subjectId='04' then if(a.evalScore is not null,a.evalScore,0) end) as kejian	
						from (
							select tt.pid as uploadPid,e.stuUserId as stuUserId,e.subjectId as subjectId,e.uploadPath as uploadPath,
								tt.uploadCount as uploadCount,e.evalScore as evalScore,e.uploadTime as uploadTime,e.evalTime as evalTime
							from (
								select max(s.pid) as pid,max(s.uploadCount) as uploadCount
								from (
									select subjectId,max(evalScore) as evalScore 
									from zznu_eva_stu_upload_info 
									where isUploadSucess='S' 
									group by stuUserId,subjectId
								) t left join zznu_eva_stu_upload_info s on (t.subjectId=s.subjectId and t.evalScore=s.evalScore)
								
								group by s.stuUserId,t.subjectId,t.evalScore
							) tt left join zznu_eva_stu_upload_info e on tt.pid=e.pid
						) a group by a.stuUserId
					) v
				) n on m.stuUserId=n.stuUserId
			) f group by f.acaId
		) ff
		<if test="acaId != null and acaId != ''">
			where ff.acaId=#{acaId,jdbcType=VARCHAR}
		</if>
		order by zongPassRate desc		
	</select>
	
	<!-- 获取不同学院的综合平均分 -->
	<select id="getCompreAvgScoreGroupbyAcaId" parameterType="java.util.Map" resultType="java.util.HashMap">
		select ff.acaId as acaId, ff.acaName as acaName,
			round(ff.weigeSum / ff.stuTotal,2) as weigeAvg,
			round(ff.banshuSum / ff.stuTotal,2) as banshuAvg,
			round(ff.jiaoanSum / ff.stuTotal,2) as jiaoanAvg,
			round(ff.kejianSum / ff.stuTotal,2) as kejianAvg,
			round(ff.zongSum / ff.stuTotal,2) as zongAvg
		from (
			select f.acaId as acaId,f.acaName as acaName,
				sum(f.weige) as weigeSum,
				sum(if(f.weige is not null,1,0)) as weigeCount, 	
				sum(f.banshu) as banshuSum,
				sum(if(f.banshu is not null,1,0)) as banshuCount, 
				sum(f.jiaoan) as jiaoanSum,
				sum(if(f.jiaoan is not null,1,0)) as jiaoanCount, 
				sum(f.kejian) as kejianSum,
				sum(if(f.kejian is not null,1,0)) as kejianCount, 
				sum(f.zong) as zongSum,
				sum(if(f.zong is not null,1,0)) as zongCount,
				count(distinct f.stuUserId) as stuTotal
			from (
				select
					m.stuUserId as stuUserId,
					m.stuNo as stuNo,
					m.stuName as stuName,
					m.stuSex as stuSex,
					m.depId as depId,
					m.deptName as deptName,
					m.acaId as acaId,
					m.acaName as acaName,
					n.weige as weige,
					n.banshu as banshu,
					n.jiaoan as jiaoan,
					n.kejian as kejian,
					n.zong as zong
				from (
				select a.id as stuUserId,a.tsno as stuNo,a.name as stuName,a.sex as stuSex,
					a.deptId as depId,b.deptName as deptName,b.acaId as acaId,b.acaName as acaName
				from zznu_eva_teach_stu_info a left join zznu_eva_dept_info b on a.deptId=b.deptId
				where a.userType='S' and a.status='E' and a.isOpenAct='1'
				) m left join (
					select v.stuUserId as stuUserId,
						v.weige as weige,
						v.banshu as banshu,
						v.jiaoan as jiaoan,
						v.kejian as kejian,
						(v.weige+v.banshu+v.jiaoan+v.kejian) as zong
					from (
						select a.stuUserId,
							sum(case when a.subjectId='01' then if(a.evalScore is not null,a.evalScore,0) end) as weige,
							sum(case when a.subjectId='02' then if(a.evalScore is not null,a.evalScore,0) end) as banshu,
							sum(case when a.subjectId='03' then if(a.evalScore is not null,a.evalScore,0) end) as jiaoan,
							sum(case when a.subjectId='04' then if(a.evalScore is not null,a.evalScore,0) end) as kejian	
						from (
							select tt.pid as uploadPid,e.stuUserId as stuUserId,e.subjectId as subjectId,e.uploadPath as uploadPath,
								tt.uploadCount as uploadCount,e.evalScore as evalScore,e.uploadTime as uploadTime,e.evalTime as evalTime
							from (
								select max(s.pid) as pid,max(s.uploadCount) as uploadCount
								from (
									select subjectId,max(evalScore) as evalScore 
									from zznu_eva_stu_upload_info 
									where isUploadSucess='S' 
									group by stuUserId,subjectId
								) t left join zznu_eva_stu_upload_info s on (t.subjectId=s.subjectId and t.evalScore=s.evalScore)
								
								group by s.stuUserId,t.subjectId,t.evalScore
							) tt left join zznu_eva_stu_upload_info e on tt.pid=e.pid
						) a group by a.stuUserId
					) v
				) n on m.stuUserId=n.stuUserId
			) f group by f.acaId
		) ff
		<if test="acaIds != '' and acaIds != null">  
			where ff.acaId in  
			<foreach item="acaId" index="index" collection="acaIds" open="(" separator="," close=")">  
				#{acaId}  
			</foreach>  
		</if>
		order by zongAvg desc
		limit 5
	</select>
	
	<!-- 获取学院信息列表，用于前端下拉框显示（暂废弃，不使用） -->	
	<select id="getAcaInfoList" parameterType="java.util.Map" resultType="java.util.HashMap">
		select distinct b.acaId as acaId,b.acaName as acaName
		from zznu_eva_teach_stu_info a left join zznu_eva_dept_info b on a.deptId=b.deptId
		where a.userType='S' and a.status='E' and a.isOpenAct='1'
	</select>
	
	<!-- 获取不同学院各科目的最大考核次数 -->
	<select id="getAcaExamCountByAidSid" parameterType="java.util.Map" resultType="java.util.HashMap">
		select 
			v.acaId as acaId,
			v.acaName as acaName,
			sum(case when v.subjectId='01' then v.maxCount end) as weige,
			sum(case when v.subjectId='02' then v.maxCount end) as banshu,
			sum(case when v.subjectId='03' then v.maxCount end) as jiaoan,
			sum(case when v.subjectId='04' then v.maxCount end) as kejian
		from (
			select 
				m.acaId as acaId,
				m.acaName as acaName,
				n.subjectId as subjectId,
				n.subjectName as subjectName,
				max(n.maxCount) as maxCount 
			from (
				select a.id as stuUserId,a.tsno as stuNo,a.name as stuName,a.sex as stuSex,
					a.deptId as depId,b.deptName as deptName,b.acaId as acaId,b.acaName as acaName
				from zznu_eva_teach_stu_info a left join zznu_eva_dept_info b on a.deptId=b.deptId
				where a.userType='S' and a.status='E' and a.isOpenAct='1'
			) m left join (
				select stuUserId,subjectId,subjectName,max(uploadCount) as maxCount from zznu_eva_stu_upload_info
				group by stuUserId,subjectId
			) n on m.stuUserId=n.stuUserId
			group by m.acaId,n.subjectId 
		) v 
		<if test="acaIds != '' and acaIds != null">  
			where v.acaId in  
			<foreach item="acaId" index="index" collection="acaIds" open="(" separator="," close=")">  
				#{acaId}  
			</foreach>  
		</if>		
		group by v.acaId
		limit 5
	</select>
	
	

</mapper>

