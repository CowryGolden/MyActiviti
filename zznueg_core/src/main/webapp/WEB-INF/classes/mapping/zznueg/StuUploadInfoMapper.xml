<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zzrenfeng.zznueg.dao.StuUploadInfoMapper" >
  <resultMap id="BaseResultMap" type="com.zzrenfeng.zznueg.entity.StuUploadInfo" >
    <id column="pid" property="pid" jdbcType="VARCHAR" />
    <result column="stuUserId" property="stuUserId" jdbcType="VARCHAR" />
    <result column="subjectId" property="subjectId" jdbcType="VARCHAR" />
    <result column="subjectName" property="subjectName" jdbcType="VARCHAR" />
    <result column="isUploadSucess" property="isUploadSucess" jdbcType="CHAR" />
    <result column="uploadPath" property="uploadPath" jdbcType="VARCHAR" />
    <result column="uploadCount" property="uploadCount" jdbcType="SMALLINT" />
    <result column="uploadTime" property="uploadTime" jdbcType="TIMESTAMP" />
    <result column="fileSize" property="fileSize" jdbcType="VARCHAR" />
    <result column="evalScore" property="evalScore" jdbcType="SMALLINT" />
    <result column="teachUserId" property="teachUserId" jdbcType="VARCHAR" />
    <result column="evalTime" property="evalTime" jdbcType="TIMESTAMP" />
    <result column="memo" property="memo" jdbcType="VARCHAR" />
    <result column="creater" property="creater" jdbcType="VARCHAR" />
    <result column="modifyer" property="modifyer" jdbcType="VARCHAR" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
    <result column="lastmod" property="lastmod" jdbcType="TIMESTAMP" />
    <result column="previewPath" property="previewPath" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    pid, stuUserId, subjectId, subjectName, isUploadSucess, uploadPath, uploadCount, 
    uploadTime, fileSize, evalScore, teachUserId, evalTime, memo, creater, modifyer, created, lastmod, previewPath
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from zznu_eva_stu_upload_info
    where pid = #{pid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from zznu_eva_stu_upload_info
    where pid = #{pid,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.zzrenfeng.zznueg.entity.StuUploadInfo" >
    insert into zznu_eva_stu_upload_info (pid, stuUserId, subjectId, 
      subjectName, isUploadSucess, uploadPath, 
      uploadCount, uploadTime, fileSize, evalScore, 
      teachUserId, evalTime, memo, 
      creater, modifyer, created, 
      lastmod, previewPath)
    values (#{pid,jdbcType=VARCHAR}, #{stuUserId,jdbcType=VARCHAR}, #{subjectId,jdbcType=VARCHAR}, 
      #{subjectName,jdbcType=VARCHAR}, #{isUploadSucess,jdbcType=CHAR}, #{uploadPath,jdbcType=VARCHAR}, 
      #{uploadCount,jdbcType=SMALLINT}, #{uploadTime,jdbcType=TIMESTAMP}, #{fileSize,jdbcType=VARCHAR}, #{evalScore,jdbcType=SMALLINT}, 
      #{teachUserId,jdbcType=VARCHAR}, #{evalTime,jdbcType=TIMESTAMP}, #{memo,jdbcType=VARCHAR}, 
      #{creater,jdbcType=VARCHAR}, #{modifyer,jdbcType=VARCHAR}, #{created,jdbcType=TIMESTAMP}, 
      #{lastmod,jdbcType=TIMESTAMP}, #{previewPath,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zzrenfeng.zznueg.entity.StuUploadInfo" >
    insert into zznu_eva_stu_upload_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="pid != null" >
        pid,
      </if>
      <if test="stuUserId != null" >
        stuUserId,
      </if>
      <if test="subjectId != null" >
        subjectId,
      </if>
      <if test="subjectName != null" >
        subjectName,
      </if>
      <if test="isUploadSucess != null" >
        isUploadSucess,
      </if>
      <if test="uploadPath != null" >
        uploadPath,
      </if>
      <if test="uploadCount != null" >
        uploadCount,
      </if>
      <if test="uploadTime != null" >
        uploadTime,
      </if>
      <if test="fileSize != null" >
        fileSize,
      </if>
      <if test="evalScore != null" >
        evalScore,
      </if>
      <if test="teachUserId != null" >
        teachUserId,
      </if>
      <if test="evalTime != null" >
        evalTime,
      </if>
      <if test="memo != null" >
        memo,
      </if>
      <if test="creater != null" >
        creater,
      </if>
      <if test="modifyer != null" >
        modifyer,
      </if>
      <if test="created != null" >
        created,
      </if>
      <if test="lastmod != null" >
        lastmod,
      </if>
      <if test="previewPath != null" >
        previewPath,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="pid != null" >
        #{pid,jdbcType=VARCHAR},
      </if>
      <if test="stuUserId != null" >
        #{stuUserId,jdbcType=VARCHAR},
      </if>
      <if test="subjectId != null" >
        #{subjectId,jdbcType=VARCHAR},
      </if>
      <if test="subjectName != null" >
        #{subjectName,jdbcType=VARCHAR},
      </if>
      <if test="isUploadSucess != null" >
        #{isUploadSucess,jdbcType=CHAR},
      </if>
      <if test="uploadPath != null" >
        #{uploadPath,jdbcType=VARCHAR},
      </if>
      <if test="uploadCount != null" >
        #{uploadCount,jdbcType=SMALLINT},
      </if>
      <if test="uploadTime != null" >
        #{uploadTime,jdbcType=TIMESTAMP},
      </if>
      <if test="fileSize != null" >
        #{fileSize,jdbcType=TIMESTAMP},
      </if>
      <if test="evalScore != null" >
        #{evalScore,jdbcType=SMALLINT},
      </if>
      <if test="teachUserId != null" >
        #{teachUserId,jdbcType=VARCHAR},
      </if>
      <if test="evalTime != null" >
        #{evalTime,jdbcType=TIMESTAMP},
      </if>
      <if test="memo != null" >
        #{memo,jdbcType=VARCHAR},
      </if>
      <if test="creater != null" >
        #{creater,jdbcType=VARCHAR},
      </if>
      <if test="modifyer != null" >
        #{modifyer,jdbcType=VARCHAR},
      </if>
      <if test="created != null" >
        #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="lastmod != null" >
        #{lastmod,jdbcType=TIMESTAMP},
      </if>
      <if test="previewPath != null" >
        #{previewPath,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zzrenfeng.zznueg.entity.StuUploadInfo" >
    update zznu_eva_stu_upload_info
    <set >
      <if test="stuUserId != null" >
        stuUserId = #{stuUserId,jdbcType=VARCHAR},
      </if>
      <if test="subjectId != null" >
        subjectId = #{subjectId,jdbcType=VARCHAR},
      </if>
      <if test="subjectName != null" >
        subjectName = #{subjectName,jdbcType=VARCHAR},
      </if>
      <if test="isUploadSucess != null" >
        isUploadSucess = #{isUploadSucess,jdbcType=CHAR},
      </if>
      <if test="uploadPath != null" >
        uploadPath = #{uploadPath,jdbcType=VARCHAR},
      </if>
      <if test="uploadCount != null" >
        uploadCount = #{uploadCount,jdbcType=SMALLINT},
      </if>
      <if test="uploadTime != null" >
        uploadTime = #{uploadTime,jdbcType=TIMESTAMP},
      </if>
      <if test="fileSize != null" >
        fileSize = #{fileSize,jdbcType=TIMESTAMP},
      </if>
      <if test="evalScore != null" >
        evalScore = #{evalScore,jdbcType=SMALLINT},
      </if>
      <if test="teachUserId != null" >
        teachUserId = #{teachUserId,jdbcType=VARCHAR},
      </if>
      <if test="evalTime != null" >
        evalTime = #{evalTime,jdbcType=TIMESTAMP},
      </if>
      <if test="memo != null" >
        memo = #{memo,jdbcType=VARCHAR},
      </if>
      <if test="creater != null" >
        creater = #{creater,jdbcType=VARCHAR},
      </if>
      <if test="modifyer != null" >
        modifyer = #{modifyer,jdbcType=VARCHAR},
      </if>
      <if test="created != null" >
        created = #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="lastmod != null" >
        lastmod = #{lastmod,jdbcType=TIMESTAMP},
      </if>
      <if test="previewPath != null" >
        previewPath = #{previewPath,jdbcType=VARCHAR},
      </if>
    </set>
    where pid = #{pid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zzrenfeng.zznueg.entity.StuUploadInfo" >
    update zznu_eva_stu_upload_info
    set stuUserId = #{stuUserId,jdbcType=VARCHAR},
      subjectId = #{subjectId,jdbcType=VARCHAR},
      subjectName = #{subjectName,jdbcType=VARCHAR},
      isUploadSucess = #{isUploadSucess,jdbcType=CHAR},
      uploadPath = #{uploadPath,jdbcType=VARCHAR},
      uploadCount = #{uploadCount,jdbcType=SMALLINT},
      uploadTime = #{uploadTime,jdbcType=TIMESTAMP},
      fileSize = #{fileSize,jdbcType=TIMESTAMP},
      evalScore = #{evalScore,jdbcType=SMALLINT},
      teachUserId = #{teachUserId,jdbcType=VARCHAR},
      evalTime = #{evalTime,jdbcType=TIMESTAMP},
      memo = #{memo,jdbcType=VARCHAR},
      creater = #{creater,jdbcType=VARCHAR},
      modifyer = #{modifyer,jdbcType=VARCHAR},
      created = #{created,jdbcType=TIMESTAMP},
      lastmod = #{lastmod,jdbcType=TIMESTAMP},
      previewPath = #{previewPath,jdbcType=VARCHAR}
    where pid = #{pid,jdbcType=VARCHAR}
  </update>
  
  
  <!-- 学生平台——根据学生ID获取该学生的基本信息 -->
  <select id="getStuInfoBySuid" parameterType="java.util.Map" resultType="java.util.HashMap">
  	select 
		a.id as stuUserId,
		a.tsno as stuNo,
		a.name as stuName,
		a.sex as stuSex,
		a.deptId as deptId,
		b.deptName as deptName,
		b.acaId as acaId,
		b.acaName as acaName,
		a.classId as classId,
		c.className as className
	from zznu_eva_teach_stu_info a 
		left join zznu_eva_dept_info b on a.deptId=b.deptId
		left join zznu_eva_class_info c on a.classId=c.classId
	where a.id=#{stuUserId}
  </select>
  
  
  <!-- 学生平台——获取某个学生某个科目已经成功上传的次数 -->
  <select id="getUploadedCountByStuIdAndSubId" resultType="java.lang.Integer">
  	select max(uploadCount) as uploadedCount 
  	from zznu_eva_stu_upload_info 
  	where stuUserId=#{stuUserId,jdbcType=VARCHAR} 
  		and subjectId=#{subjectId,jdbcType=VARCHAR} 
  		and isUploadSucess='S'
  </select>
  
  <!-- 学生平台——分页查询所有上传科目信息 -->
  <select id="findAllByPage" parameterType="com.zzrenfeng.base.utils.PageUtil" resultType="java.util.HashMap">
  	select 
	a.pid as pid,
	a.stuUserId as stuUserId,
	b.user_name as stuUserName,
	a.subjectId as subjectId,
	a.subjectName as subjectName,
	a.isUploadSucess as isUploadSucess,
	a.uploadPath as uploadPath,
	a.uploadCount as uploadCount,
	date_format(a.uploadTime,'%Y-%m-%d %T') as uploadTime,
	a.fileSize as fileSize,
	a.evalScore as evalScore,
	a.teachUserId as teachUserId,
	date_format(a.evalTime,'%Y-%m-%d %T') as evalTime,
	a.memo as memo,
	a.creater as creater,
	a.modifyer as modifyer,
	date_format(a.created,'%Y-%m-%d %T') as created,
	date_format(a.lastmod,'%Y-%m-%d %T') as lastmod,
	a.previewPath as previewPath
	from zznu_eva_stu_upload_info a left join sys_user b on a.stuUserId=b.user_id 
	where a.isUploadSucess='S' order by a.lastmod desc limit #{begin},#{end}
  </select>
  
  <!-- 学生平台——根据学生ID查询每个学生各自上传的信息 -->
  <select id="findAllByPageByStuUid" parameterType="java.util.Map" resultType="java.util.HashMap">
  	select 
	a.pid as pid,
	a.stuUserId as stuUserId,
	b.user_name as stuUserName,
	a.subjectId as subjectId,
	a.subjectName as subjectName,
	a.isUploadSucess as isUploadSucess,
	a.uploadPath as uploadPath,
	a.uploadCount as uploadCount,
	date_format(a.uploadTime,'%Y-%m-%d %T') as uploadTime,
	a.fileSize as fileSize,
	a.evalScore as evalScore,
	a.teachUserId as teachUserId,
	date_format(a.evalTime,'%Y-%m-%d %T') as evalTime,
	a.memo as memo,
	a.creater as creater,
	a.modifyer as modifyer,
	date_format(a.created,'%Y-%m-%d %T') as created,
	date_format(a.lastmod,'%Y-%m-%d %T') as lastmod,
	a.previewPath as previewPath
	from zznu_eva_stu_upload_info a left join sys_user b on a.stuUserId=b.user_id 
	where a.stuUserId=#{stuUserId} and a.isUploadSucess='S' 
	order by a.lastmod desc limit #{begin},#{end}
  </select>
  
  <!-- 学生平台——根据科目ID分别查询各个科目的上传信息 -->
  <select id="getUploadInfoBySubId" parameterType="java.util.Map" resultType="java.util.HashMap">
    select 
	a.pid as pid,
	a.stuUserId as stuUserId,
	b.user_name as stuUserName,
	a.subjectId as subjectId,
	a.subjectName as subjectName,
	a.isUploadSucess as isUploadSucess,
	a.uploadPath as uploadPath,
	a.uploadCount as uploadCount,
	date_format(a.uploadTime,'%Y-%m-%d %T') as uploadTime,
	a.fileSize as fileSize,
	a.evalScore as evalScore,
	a.teachUserId as teachUserId,
	date_format(a.evalTime,'%Y-%m-%d %T') as evalTime,
	a.memo as memo,
	a.creater as creater,
	a.modifyer as modifyer,
	date_format(a.created,'%Y-%m-%d %T') as created,
	date_format(a.lastmod,'%Y-%m-%d %T') as lastmod,
	a.previewPath as previewPath
	from zznu_eva_stu_upload_info a left join sys_user b on a.stuUserId=b.user_id
    where a.stuUserId=#{stuUserId} and a.subjectId=#{subjectId} and isUploadSucess='S' 
    order by uploadCount desc
  </select>  
  
  <!-- 获取有效记录总数 -->
  <select id="getCount" resultType="java.lang.Long">
  	select count(*) as cnt 
  	from zznu_eva_stu_upload_info 
  	where isUploadSucess='S'
  </select>
  
  <!-- 学生平台——根据学生ID获取有效记录总数 -->
  <select id="getCountByStuUid" parameterType="java.lang.String" resultType="java.lang.Long">
  	select count(*) as cnt 
  	from zznu_eva_stu_upload_info 
  	where stuUserId=#{stuUserId} and isUploadSucess='S'
  </select>
  
  
  <!-- 教师平台——教师查询所教授班级对应的学生列表（v1.0：未包含科目及评分信息） -->
  <select id="getStuListByTcid4Teach" parameterType="java.util.Map" resultType="java.util.HashMap">
	select 
		a.profId as profId,
		a.teachUserId as teachUserId,
		a.classId as classId,
		b.className as className,
		b.deptId as deptId,
		b.deptName as deptName,
		c.acaId as acaId,
		c.acaName as acaName,
		d.id as stuUserId,
		d.tsno as stuNo,
		d.name as stuName,
		d.sex as stuSex
	from zznu_eva_teach_class_rel a 
		left join zznu_eva_class_info b 
			on a.classId=b.classId
		left join zznu_eva_dept_info c
			on b.deptId=c.deptId
		left join zznu_eva_teach_stu_info d 
			on a.classId=d.classId
	where a.teachUserId=#{teachUserId}
		and a.status='E' and b.status='E' and c.status='E' and d.status='E'
		and d.userType='S' and d.isOpenAct='1' 
	order by b.deptId,a.classId asc 	 
  </select>
  
  <!-- 教师平台——教师根据学生列表的信息点击“上一位”或“下一位”根据学生ID查询学生最近上传的资源列表 -->
<!--  此方法中SQL语句写法有问题，获取的仅仅是最大的次数字段而已，而没有定位到最大次数记录，从而获取最大次数对应的记录信息
  <select id="getUploadListBySuid4Teach_bak" parameterType="java.util.Map" resultType="java.util.HashMap">
  	select 
		e.pid as uploadPid,
		e.stuUserId as uploadStuUserId,
		e.subjectId as subjectId,
		e.subjectName as subjectName,
		max(e.uploadCount) as uploadCount,
		e.uploadPath as uploadPath,
		e.fileSize as fileSize,
		date_format(e.uploadTime,'%Y-%m-%d %T') as uploadTime,
		e.evalScore as evalScore,
		e.teachUserId as evalTeachUserId,
		date_format(e.evalTime,'%Y-%m-%d %T') as evalTime
	from zznu_eva_stu_upload_info e
	where e.isUploadSucess='S'
		and e.stuUserId=#{stuUserId}
	group by e.stuUserId,e.subjectId  	
  </select>
 --> 
  <!-- 教师平台——教师关心最近上传的成绩是否评分，根据每科最近上传记录定位，即取每科次数最大的 --> 
  <select id="getUploadListBySuid4Teach" parameterType="java.util.Map" resultType="java.util.HashMap">
  	select 
		v.pid as uploadPid,
		e.stuUserId as uploadStuUserId,
		e.subjectId as subjectId,
		e.subjectName as subjectName,
		v.uploadCount as uploadCount,
		e.uploadPath as uploadPath,
		e.fileSize as fileSize,
		date_format(e.uploadTime,'%Y-%m-%d %T') as uploadTime,
		e.evalScore as evalScore,
		e.teachUserId as evalTeachUserId,
		date_format(e.evalTime,'%Y-%m-%d %T') as evalTime,
		e.previewPath as previewPath
	from (
		select max(s.pid) as pid,t.subjectId as subjectId,max(s.uploadCount) as uploadCount
		from (
			select subjectId,max(uploadCount) as uploadCount 
			from zznu_eva_stu_upload_info 
			where isUploadSucess='S' and stuUserId=#{stuUserId}
			group by stuUserId,subjectId
		) t left join zznu_eva_stu_upload_info s on (t.subjectId=s.subjectId and t.uploadCount=s.uploadCount)
		where s.stuUserId=#{stuUserId}
		group by s.stuUserId,t.subjectId,t.uploadCount
	) v left join zznu_eva_stu_upload_info e on v.pid=e.pid
	order by e.subjectId asc
  </select>
  <!-- 学生平台——学生关心的是每次上传的科目是否得到最好的成绩，根据最近每科最高成绩定位，即取每科分数最高的 --> 
  <select id="getUploadListBySuid4Stu" parameterType="java.util.Map" resultType="java.util.HashMap">
	select 
		v.pid as uploadPid,
		e.stuUserId as uploadStuUserId,
		e.subjectId as subjectId,
		e.subjectName as subjectName,
		e.uploadCount as uploadCount,
		e.uploadPath as uploadPath,
		e.fileSize as fileSize,
		date_format(e.uploadTime,'%Y-%m-%d %T') as uploadTime,
		v.evalScore as evalScore,
		e.teachUserId as evalTeachUserId,
		date_format(e.evalTime,'%Y-%m-%d %T') as evalTime,
		e.previewPath as previewPath
	from (
		select max(s.pid) as pid,t.subjectId as subjectId,max(s.evalScore) as evalScore
		from (
			select subjectId,max(evalScore) as evalScore 
			from zznu_eva_stu_upload_info 
			where isUploadSucess='S' and stuUserId=#{stuUserId}
			group by stuUserId,subjectId
		) t left join zznu_eva_stu_upload_info s on (t.subjectId=s.subjectId and t.evalScore=s.evalScore)
		where s.stuUserId=#{stuUserId}
		group by s.stuUserId,t.subjectId,t.evalScore
	) v left join zznu_eva_stu_upload_info e on v.pid=e.pid
	order by e.subjectId asc 
  </select>
 
  <!-- 教师平台——先根据教师ID查出其教授的班级，过滤无效(没传资料的)的记录后，再根据学生ID过滤单个学生信息及其资源信息(####暂时不用####) -->
  <select id="getStuUpInfoListByTuidAndSuid4Teach" parameterType="java.util.Map" resultType="java.util.HashMap">
	select 
		m.profId as profId,
		m.teachUserId as teachUserId,
		m.classId as classId,
		m.className as className,
		m.deptId as deptId,
		m.deptName as deptName,
		m.acaId as acaId,
		m.acaName as acaName,
		m.stuUserId as stuUserId,
		m.stuNo as stuNo,
		m.stuName as stuName,
		m.stuSex as stuSex,
		n.pid as uploadPid,
		n.stuUserId as uploadStuUserId,
		n.subjectId as subjectId,
		n.subjectName as subjectName,
		n.uploadCount as uploadCount,
		n.uploadPath as uploadPath,
		n.fileSize as fileSize,
		n.evalScore as evalScore,
		n.evalTeachUserId as evalTeachUserId,
		n.evalTime as evalTime,
		n.previewPath as previewPath
	from (
		select 
			a.profId,a.teachUserId,a.classId,
			b.className,b.deptId,b.deptName,
			c.acaId,c.acaName,
			d.id as stuUserId,d.tsno as stuNo,d.name as stuName,d.sex as stuSex
		from zznu_eva_teach_class_rel a 
			left join zznu_eva_class_info b 
				on a.classId=b.classId
			left join zznu_eva_dept_info c
				on b.deptId=c.deptId
			left join zznu_eva_teach_stu_info d 
				on a.classId=d.classId
		where a.teachUserId=#{teachUserId}
			and a.status='E' and b.status='E' and c.status='E' and d.status='E'
			and d.userType='S' and d.isOpenAct='1'
	) m left join (
		select 
			e.pid,e.stuUserId,e.subjectId,e.subjectName,
			max(e.uploadCount) as uploadCount,e.uploadPath,e.fileSize,
			e.evalScore,e.teachUserId as evalTeachUserId,e.evalTime,e.previewPath
		from zznu_eva_stu_upload_info e
		where e.isUploadSucess='S' and (e.evalScore is null or e.evalScore=0)
		group by e.stuUserId,e.subjectId
	) n on m.stuUserId=n.stuUserId
	where (n.pid is not null or n.pid != '') and m.stuUserId=#{stuUserId}
  </select>
  
  <!-- 教师平台——教师查询所教授班级对应的学生列表（v1.1：增加科目及评分信息，用于学生概览页信息显示使用，增加分页） -->
<!--  此方法中获取的每科成绩为最新上传科目的成绩，若新上传的没有被评分，因此获取为空，故不能满足取几次上传中最好成绩的需求
  <select id="getStuOverviewByTuid4Teach_bak" parameterType="java.util.Map" resultType="java.util.HashMap">
	select 
		m.profId as profId,
		m.teachUserId as teachUserId,
		m.classId as classId,
		m.className as className,
		m.deptId as deptId,
		m.deptName as deptName,
		m.acaId as acaId,
		m.acaName as acaName,
		m.stuUserId as stuUserId,
		m.stuNo as stuNo,
		m.stuName as stuName,
		m.stuSex as stuSex,
		n.weige as weige,
		n.banshu as banshu,
		n.jiaoan as jiaoan,
		n.kejian as kejian,
		n.zong as zong
	from (
		select 
			a.profId as profId,
			a.teachUserId as teachUserId,
			a.classId as classId,
			b.className as className,
			b.deptId as deptId,
			b.deptName as deptName,
			c.acaId as acaId,
			c.acaName as acaName,
			d.id as stuUserId,
			d.tsno as stuNo,
			d.name as stuName,
			d.sex as stuSex
		from zznu_eva_teach_class_rel a 
			left join zznu_eva_class_info b 
				on a.classId=b.classId
			left join zznu_eva_dept_info c
				on b.deptId=c.deptId
			left join zznu_eva_teach_stu_info d 
				on a.classId=d.classId
		where a.teachUserId=#{teachUserId}
			and a.status='E' and b.status='E' and c.status='E' and d.status='E'
			and d.userType='S' and d.isOpenAct='1' 
		order by b.deptId,a.classId asc 
	) m left join (
		select v.stuUserId as stuUserId,
			v.weige as weige,
			v.banshu as banshu,
			v.jiaoan as jiaoan,
			v.kejian as kejian,
			(v.weige+v.banshu+v.jiaoan+v.kejian) as zong
		from (
			select a.stuUserId,
				sum(case when a.subjectId='01' then if(a.evalScore is not null,a.evalScore,null) end) as weige,
				sum(case when a.subjectId='02' then if(a.evalScore is not null,a.evalScore,null) end) as banshu,
				sum(case when a.subjectId='03' then if(a.evalScore is not null,a.evalScore,null) end) as jiaoan,
				sum(case when a.subjectId='04' then if(a.evalScore is not null,a.evalScore,null) end) as kejian	
			from (
				select t.pid as uploadPid,e.stuUserId as stuUserId,e.subjectId as subjectId,
					t.uploadCount as uploadCount,e.evalScore as evalScore
				from (
					select max(pid) as pid,max(uploadCount) as uploadCount 
					from zznu_eva_stu_upload_info 
					where isUploadSucess='S' group by stuUserId,subjectId
				) t left join zznu_eva_stu_upload_info e on t.pid=e.pid
			) a group by a.stuUserId
		) v
	) n on m.stuUserId=n.stuUserId 
	order by m.deptId,m.classId asc
	limit #{begin},#{end}
  </select>
 -->  
  <select id="getStuOverviewByTuid4Teach" parameterType="java.util.Map" resultType="java.util.HashMap">
	select 
		m.profId as profId,
		m.teachUserId as teachUserId,
		m.classId as classId,
		m.className as className,
		m.deptId as deptId,
		m.deptName as deptName,
		m.acaId as acaId,
		m.acaName as acaName,
		m.stuUserId as stuUserId,
		m.stuNo as stuNo,
		m.stuName as stuName,
		m.stuSex as stuSex,
		n.weige as weige,
		n.banshu as banshu,
		n.jiaoan as jiaoan,
		n.kejian as kejian,
		n.zong as zong
	from (
		select 
			a.profId as profId,
			a.teachUserId as teachUserId,
			a.classId as classId,
			b.className as className,
			b.deptId as deptId,
			b.deptName as deptName,
			c.acaId as acaId,
			c.acaName as acaName,
			d.id as stuUserId,
			d.tsno as stuNo,
			d.name as stuName,
			d.sex as stuSex
		from zznu_eva_teach_class_rel a 
			left join zznu_eva_class_info b 
				on a.classId=b.classId
			left join zznu_eva_dept_info c
				on b.deptId=c.deptId
			left join zznu_eva_teach_stu_info d 
				on a.classId=d.classId
		where a.teachUserId=#{teachUserId}
			and a.status='E' and b.status='E' and c.status='E' and d.status='E'
			and d.userType='S' and d.isOpenAct='1' 
		order by b.deptId,a.classId asc 
	) m left join (
		select v.stuUserId as stuUserId,
			v.weige as weige,
			v.banshu as banshu,
			v.jiaoan as jiaoan,
			v.kejian as kejian,
			(v.weige+v.banshu+v.jiaoan+v.kejian) as zong
		from (
			select a.stuUserId,
				sum(case when a.subjectId='01' then if(a.evalScore is not null,a.evalScore,null) end) as weige,
				sum(case when a.subjectId='02' then if(a.evalScore is not null,a.evalScore,null) end) as banshu,
				sum(case when a.subjectId='03' then if(a.evalScore is not null,a.evalScore,null) end) as jiaoan,
				sum(case when a.subjectId='04' then if(a.evalScore is not null,a.evalScore,null) end) as kejian	
			from (
				select tt.pid as uploadPid,e.stuUserId as stuUserId,e.subjectId as subjectId,e.uploadPath as uploadPath,
					tt.uploadCount as uploadCount,e.evalScore as evalScore,e.uploadTime as uploadTime,e.evalTime as evalTime,e.previewPath as previewPath
				from (
					select max(s.pid) as pid,max(s.uploadCount) as uploadCount
					from (
						select subjectId,max(evalScore) as evalScore 
						from zznu_eva_stu_upload_info 
						where isUploadSucess='S' 
						group by stuUserId,subjectId
					) t left join zznu_eva_stu_upload_info s on (t.subjectId=s.subjectId and t.evalScore=s.evalScore)					
					group by s.stuUserId,t.subjectId,t.evalScore
				) tt left join zznu_eva_stu_upload_info e on tt.pid=e.pid
			) a group by a.stuUserId
		) v
	) n on m.stuUserId=n.stuUserId 
	where 1=1 
	<if test="stuNo != null and stuNo != ''"> <!-- 由于前端学生学号或姓名检索框为同一个输入框，虽然同一个值分拆成两个，但实际只能为一个值；判断一个即可 -->
		and ((m.stuNo like concat(concat('%', #{stuNo,jdbcType=VARCHAR}), '%'))
			or (m.stuName like concat(concat('%', #{stuName,jdbcType=VARCHAR}), '%')))
	</if>
	order by m.deptId,m.classId asc
	limit #{begin},#{end}
  </select>  
 
  <!-- 教师平台——根据教师ID获取教授的学生总数(以供分页使用) -->
  <select id="getStuCountByTuid" parameterType="java.util.Map" resultType="java.lang.Long">
  	select 
		count(*) as cnt
	from (
		select 
			a.profId as profId,
			a.teachUserId as teachUserId,
			a.classId as classId,
			b.className as className,
			b.deptId as deptId,
			b.deptName as deptName,
			c.acaId as acaId,
			c.acaName as acaName,
			d.id as stuUserId,
			d.tsno as stuNo,
			d.name as stuName,
			d.sex as stuSex
		from zznu_eva_teach_class_rel a 
			left join zznu_eva_class_info b 
				on a.classId=b.classId
			left join zznu_eva_dept_info c
				on b.deptId=c.deptId
			left join zznu_eva_teach_stu_info d 
				on a.classId=d.classId
		where a.teachUserId=#{teachUserId}
			and a.status='E' and b.status='E' and c.status='E' and d.status='E'
			and d.userType='S' and d.isOpenAct='1' 
		order by b.deptId,a.classId asc 
	) m left join (
		select v.stuUserId as stuUserId,
			v.weige as weige,
			v.banshu as banshu,
			v.jiaoan as jiaoan,
			v.kejian as kejian,
			(v.weige+v.banshu+v.jiaoan+v.kejian) as zong
		from (
			select a.stuUserId,
				sum(case when a.subjectId='01' then if(a.evalScore is not null,a.evalScore,null) end) as weige,
				sum(case when a.subjectId='02' then if(a.evalScore is not null,a.evalScore,null) end) as banshu,
				sum(case when a.subjectId='03' then if(a.evalScore is not null,a.evalScore,null) end) as jiaoan,
				sum(case when a.subjectId='04' then if(a.evalScore is not null,a.evalScore,null) end) as kejian	
			from (
				select stuUserId,subjectId,max(uploadCount),evalScore
				from zznu_eva_stu_upload_info
				where isUploadSucess='S'
				group by stuUserId,subjectId
			) a group by a.stuUserId
		) v
	) n on m.stuUserId=n.stuUserId
	where 1=1 
	<if test="stuNo != null and stuNo != ''"> <!-- 由于前端学生学号或姓名检索框为同一个输入框，虽然同一个值分拆成两个，但实际只能为一个值；判断一个即可 -->
		and ((m.stuNo like concat(concat('%', #{stuNo,jdbcType=VARCHAR}), '%'))
			or (m.stuName like concat(concat('%', #{stuName,jdbcType=VARCHAR}), '%')))
	</if>
  </select>
  
  
  
</mapper>