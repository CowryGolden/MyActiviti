<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd  ">

    <!-- 它背后注册了很多用于解析注解的处理器,其中就包括<context:annotation-config/>配置的注解所使用的处理器 -->
    <!-- 所以配置了<context:component-scan base-package="">之后,便无需再配置<context:annotation-config> -->
<!--     <context:component-scan base-package="com.zzrenfeng.base.controller,com.zzrenfeng.zznueg.controller"/> -->
	<context:component-scan base-package="com.zzrenfeng.activiti.*"/>
	<!-- <context:component-scan base-package="com.zzrenfeng.zznueg.controller"/> -->
	
	<!-- 开启controller类aop支持（前缀'aop'未绑定，没有在对应的XML配置文件开头引入相关定义描述） -->
	<!-- <aop:config proxy-target-class="true"></aop:config> -->

    <!-- 启用SpringMVC的注解功能,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 -->
    <mvc:annotation-driven />



    <!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会找不到 -->
    <!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/resources/**"的资源，都会从"/resources/"里面进行查找 -->
    <!-- 我们可以访问http://IP:8080/xxx/js/my.css和http://IP:8080/xxx/resources/js/my.css对比出来 -->
    <mvc:resources mapping="/download/**" location="/download/"/>
    <mvc:resources mapping="/upload/**" location="/upload/"/>
    <mvc:resources mapping="/resources/**" location="/resources/"/>
    <mvc:resources mapping="/druid/**" location="/WEB-INF/druid/"/>
    <mvc:resources mapping="/WEB-INF/**" location="/WEB-INF/"/>
    <mvc:resources mapping="/favicon.ico" location="/"/>

</beans>